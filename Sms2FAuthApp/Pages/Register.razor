@page "/register"
@using Sms2FAuthApp.Models
@inject NavigationManager Navigation

<div class="auth-form">
    <h3 style="margin-top: 2em;">Register</h3>

    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="user.Username" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="user.ConfirmPassword" />
        </div>

        <div class="form-group">
            <label for="phoneNumber">Phone Number (starts with +359):</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="user.PhoneNumber" pattern="\+359[0-9]{8,9}" title="Phone number must start with +359 and contain 9 digits." />
        </div>

        <button type="submit" class="btn btn-primary mt-2">Register</button>
    </EditForm>
    <div style="text-align: center; margin-top: 1em;" class="on-hover" @onclick="NavigateToLogin">Already have an account? Login here.</div>
    @if (feedback.HasFeedback)
    {
        <div class="alert-box @feedback.AlertType">
            @feedback.AlertMessage
        </div>
    }
</div>

@code {
    private UserRegisterModel user = new UserRegisterModel();
    private FeedbackModel feedback = new FeedbackModel();
    private HttpClient _http;

    protected override async Task OnInitializedAsync()
    {
        _http = new HttpClient()
            {
                BaseAddress = new Uri(Navigation.BaseUri)
            };
    }

    private async Task HandleValidSubmit()
    {
        if (user.Password == user.ConfirmPassword)
        {
            var response = await _http.PostAsJsonAsync("/api/register", user);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Registration failed: {errorMessage}");
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            feedback.HasFeedback = true;
            feedback.AlertType = "alert-warning";
            feedback.AlertMessage = "Passwords do not match. Try again.";
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}